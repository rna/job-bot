#!/usr/bin/env ruby

require File.expand_path('../config/environment', __dir__)

require 'telegram/bot'

token = Rails.application.credentials.telegram[:token]

Telegram::Bot::Client.run(token) do |bot|
  bot.listen do |message|
    greetings = %w[Hola Bonjour Namaste Hello].sample
    greet = "#{greetings} #{message.from.first_name}, Welcome to Personal Remote Job Board"
    tech_question = 'Please tel me in which technology you are looking for job'
    tech_answers = Telegram::Bot::Types::ReplyKeyboardMarkup
      .new(keyboard: [%w[Rails Python]], one_time_keyboard: true)

    sub_question = 'How do you want the alerts?'
    sub_answers = Telegram::Bot::Types::ReplyKeyboardMarkup
      .new(keyboard: [%w[One-time Recurring]], one_time_keyboard: true)

    case message.text
    when '/start'
      bot.api.send_message(chat_id: message.chat.id, text: greet)
      bot.api.send_message(chat_id: message.chat.id, text: tech_question, reply_markup: tech_answers)
    when 'Rails'
      bot.api.send_message(chat_id: message.chat.id, text: sub_question, reply_markup: sub_answers)
      case message.text
      when 'One-time'
        bot.api.send_message(chat_id: message.chat.id, text: "Here it is the list #{message.from.first_name}")
        Job.where(technology: 'rails').map { |item| bot.api.send_message(chat_id: message.chat.id, text: item.link) }
      when 'Recurring'
        #Here goes a method to include user to DB
        bot.api.send_message(chat_id: message.chat.id, text: "Here it is the list #{message.from.first_name}")
        Job.where(technology: 'rails').map { |item| bot.api.send_message(chat_id: message.chat.id, text: item.link) }
      else
        bot.api.send_message(chat_id: message.chat.id, text: "Sorry #{message.from.first_name}, You need to choose an option") 
      end
      bot.api.send_message(chat_id: message.chat.id, text: "Here it is the list #{message.from.first_name}")
      Job.where(technology: 'rails').map { |item| bot.api.send_message(chat_id: message.chat.id, text: item.link) }
    when 'Python'
      bot.api.send_message(chat_id: message.chat.id, text: "Here it is the list #{message.from.first_name}")
      Job.where(technology: 'python').map { |item| bot.api.send_message(chat_id: message.chat.id, text: item.link) }
    else
      bot.api.send_message(chat_id: message.chat.id, text: "Sorry #{message.from.first_name}, Currently we didnt have the jobs, will add soon.") 
    end
  end
end
